
doubulebottom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000001da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071e  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ae  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029e  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000326  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f2  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  74:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TC1_init>:
	OCR1B=h;     //初始化0.005s  一个脉冲
	stfb=j;
	
}
void TC1_init()
{ asm("sei");// 全局中断使能
  7c:	78 94       	sei
 TIMSK=(1<<OCIE1A)|(1<<OCIE1B);//双比较匹配使能
  7e:	88 e1       	ldi	r24, 0x18	; 24
  80:	89 bf       	out	0x39, r24	; 57
 TCCR1A=(1<<COM1A0)|(1<<COM1B0);//匹配时电平取反
  82:	80 e5       	ldi	r24, 0x50	; 80
  84:	8f bd       	out	0x2f, r24	; 47
 TCCR1B=(1<<WGM12)|(1<<CS11);//1/8分频器
  86:	8a e0       	ldi	r24, 0x0A	; 10
  88:	8e bd       	out	0x2e, r24	; 46
 OCR1A=50000;//初始化0.005s一个脉冲
  8a:	80 e5       	ldi	r24, 0x50	; 80
  8c:	93 ec       	ldi	r25, 0xC3	; 195
  8e:	9b bd       	out	0x2b, r25	; 43
  90:	8a bd       	out	0x2a, r24	; 42
 OCR1B=50000;//初始化0.005s一个脉冲
  92:	99 bd       	out	0x29, r25	; 41
  94:	88 bd       	out	0x28, r24	; 40
  96:	08 95       	ret

00000098 <__vector_7>:
}
ISR(TIMER1_COMPA_vect)
{   cofa++;
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <cofa>
  ae:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <cofa+0x1>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <cofa+0x1>
  b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <cofa>
      if(cofa>stfa)
  bc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <stfa>
  c0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <stfa+0x1>
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	2c f4       	brge	.+10     	; 0xd4 <__vector_7+0x3c>
    {TCCR1A=0x00;//停止翻转
  ca:	1f bc       	out	0x2f, r1	; 47
     cofa=0;//count 归零
  cc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cofa+0x1>
  d0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cofa>
    }
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	3f 91       	pop	r19
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{   cofb++;
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cofb>
  fc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cofb+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cofb+0x1>
 106:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cofb>
	if(cofb>stfb)
 10a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
 116:	2c f4       	brge	.+10     	; 0x122 <__vector_8+0x3c>
	{TCCR1B=0x00;//停止翻转
 118:	1e bc       	out	0x2e, r1	; 46
		cofb=0;//count 归零
 11a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cofb+0x1>
 11e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cofb>
	}
	
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:
int main(void)
{
	TC1_init();
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <TC1_init>



void wakeupa(int h,int j)  // 激活死去的a 并且设定速度 和脉冲数量   
//h 给 timefa j 给 stfa
{TIMSK=(1<<OCIE1A);//双比较匹配使能 再次启动
 138:	80 e1       	ldi	r24, 0x10	; 16
 13a:	89 bf       	out	0x39, r24	; 57
 OCR1A=h;     //初始化0.005s  一个脉冲
 13c:	20 e5       	ldi	r18, 0x50	; 80
 13e:	33 ec       	ldi	r19, 0xC3	; 195
 140:	3b bd       	out	0x2b, r19	; 43
 142:	2a bd       	out	0x2a, r18	; 42
 stfa=j;
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <stfa+0x1>
 14c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <stfa>
	
}
void wakeupb(int h,int j)  // 激活死去的b 并且设定速度 和脉冲数量
//h 给 timefa j 给 stfa
{TIMSK=(1<<OCIE1B);//双比较匹配使能 再次启动
 150:	48 e0       	ldi	r20, 0x08	; 8
 152:	49 bf       	out	0x39, r20	; 57
	OCR1B=h;     //初始化0.005s  一个脉冲
 154:	39 bd       	out	0x29, r19	; 41
 156:	28 bd       	out	0x28, r18	; 40
	stfb=j;
 158:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x2c>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
