
doubulebottom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_7>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TC1_init>:
	stfb=j;
	
}
void TC1_init()
{
	asm("sei");// 全局中断使能
  7c:	78 94       	sei
	
	DDRD = 0xff;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	81 bb       	out	0x11, r24	; 17
	TIMSK=(1<<OCIE1A)|(1<<OCIE1B);//双比较匹配使能
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	89 bf       	out	0x39, r24	; 57
	TCCR1A=(1<<COM1A0)|(1<<COM1B0);//匹配时电平取反
  86:	80 e5       	ldi	r24, 0x50	; 80
  88:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM12)|(1<<CS11);//1/8分频器
  8a:	8a e0       	ldi	r24, 0x0A	; 10
  8c:	8e bd       	out	0x2e, r24	; 46
	OCR1A=5000;//初始化0.005s一个脉冲
  8e:	88 e8       	ldi	r24, 0x88	; 136
  90:	93 e1       	ldi	r25, 0x13	; 19
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
	OCR1B=5000;//初始化0.005s一个脉冲
  96:	99 bd       	out	0x29, r25	; 41
  98:	88 bd       	out	0x28, r24	; 40
  9a:	08 95       	ret

0000009c <__vector_7>:
}
ISR(TIMER1_COMPA_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	//cofa++;
	//if(cofa>stfa)
	//{TCCR1A=0x00;//停止翻转
	//cofa=0;//count 归零
	//}
	DDRB |= 0XFF;
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
	PORTB |=0XFF;
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	88 bb       	out	0x18, r24	; 24
}
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{   
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	//cofb++;
	//if(cofb>stfb)
	//{TCCR1B=0x00;//停止翻转
		//cofb=0;//count 归零
	//}
	DDRB |= 0XFF;
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	87 bb       	out	0x17, r24	; 23
	PORTB |=0XFF;
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	88 bb       	out	0x18, r24	; 24
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <main>:
int main(void)
{
	TC1_init();
  e8:	0e 94 3e 00 	call	0x7c	; 0x7c <TC1_init>
  ec:	ff cf       	rjmp	.-2      	; 0xec <main+0x4>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
